# Use the official Golang image as a base image for building the application
FROM golang:1.18-alpine AS builder

# Set the working directory inside the container
WORKDIR /app

# Copy the go.mod and go.sum files to the working directory
COPY go.mod go.sum ./

# Download the dependencies
RUN go mod download

# Copy the rest of the application source code to the working directory
COPY . .

# Build the application
RUN go build -o webapp-cve-consumer ./cmd/main.go

# Use a smaller base image for the runtime environment
FROM alpine:latest

# Install PostgreSQL client tools, Kafka tools, and bash
RUN apk --no-cache add postgresql-client openjdk11-jre bash && \
    rm -rf /var/cache/apk/*

# Download and extract Kafka, then remove the tar file
RUN wget -qO- https://archive.apache.org/dist/kafka/3.4.0/kafka_2.13-3.4.0.tgz | tar xz -C /opt && \
    rm -rf /tmp/*

# Set the working directory inside the container
WORKDIR /app

# Copy the built application from the builder stage
COPY --from=builder /app/webapp-cve-consumer .

# Copy the readiness check script
COPY check-readiness.sh /usr/local/bin/check-readiness.sh

# Ensure the script has execute permissions
RUN chmod +x /usr/local/bin/check-readiness.sh

# Set the entrypoint for the container
ENTRYPOINT ["./webapp-cve-consumer"]
