package main

import (
	"context"
	"encoding/json"
	"fmt"
	"log"
	"os"
	"os/signal"
	"syscall"
	"webapp-cve-consumer/pkg/cve"
	"webapp-cve-consumer/pkg/db"

	"github.com/Shopify/sarama"
	"github.com/jackc/pgx/v4/pgxpool"
)

type ConsumerGroupHandler struct {
	database *pgxpool.Pool
}

func (ConsumerGroupHandler) Setup(sarama.ConsumerGroupSession) error {
	return nil
}

func (ConsumerGroupHandler) Cleanup(sarama.ConsumerGroupSession) error {
	return nil
}

func (h ConsumerGroupHandler) ConsumeClaim(sess sarama.ConsumerGroupSession, claim sarama.ConsumerGroupClaim) error {
	for msg := range claim.Messages() {
		var message cve.CVERecord
		log.Printf("Received message from partition %d: %s\n", claim.Partition(), string(msg.Value))
		if err := json.Unmarshal(msg.Value, &message); err != nil {
			log.Printf("Error unmarshaling message: %s", err)
		} else {
			fmt.Printf("Received message from partition %d: %+v\n", claim.Partition(), message)
			// Store the message in the database
			err := db.StoreCVERecord(h.database, message)
			if err != nil {
				log.Printf("Failed to store CVE record: %v", err)
			}
			sess.MarkMessage(msg, "")
		}
	}
	return nil
}

func main() {
	brokers := []string{"kafka.default.svc.cluster.local:9092"}
	topic := "cve"
	group := "my-consumer-group" // Define a consumer group

	database, err := db.Connect()
	if err != nil {
		log.Fatalf("Failed to connect to database: %v", err)
	}
	defer database.Close()

	// Create database schema
	err = db.CreateSchema(database)
	if err != nil {
		log.Fatalf("Failed to create schema: %v", err)
	}

	config := sarama.NewConfig()
	config.Consumer.Return.Errors = true
	config.Version = sarama.V1_1_0_0
	
	consumerGroup, err := sarama.NewConsumerGroup(brokers, group, config)
	if err != nil {
		log.Fatalf("Error creating consumer group: %s", err)
	}
	defer consumerGroup.Close()

	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()

	// Create a channel to handle OS signals
	signals := make(chan os.Signal, 1)
	signal.Notify(signals, syscall.SIGINT, syscall.SIGTERM)

	handler := ConsumerGroupHandler{database: database}

	go func() {
		for {
			if err := consumerGroup.Consume(ctx, []string{topic}, handler); err != nil {
				log.Fatalf("Error consuming messages: %s", err)
			}
			// Check if context was canceled
			if ctx.Err() != nil {
				return
			}
		}
	}()

	// Wait for a termination signal
	<-signals
	log.Println("Interrupt is detected, canceling context...")
	cancel()
}
