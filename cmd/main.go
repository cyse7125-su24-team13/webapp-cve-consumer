package main

import (
	"context"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"os"
	"os/signal"
	"sync"
	"syscall"
	"webapp-cve-consumer/pkg/cve"
	"webapp-cve-consumer/pkg/db"

	"github.com/Shopify/sarama"
	"github.com/jackc/pgx/v4/pgxpool"
)

// ConsumerGroupHandler handles Kafka consumer group sessions and claims
type ConsumerGroupHandler struct {
	database  *pgxpool.Pool
	semaphore chan struct{}
}

// Setup is run at the beginning of a new session, before ConsumeClaim
func (ConsumerGroupHandler) Setup(sarama.ConsumerGroupSession) error {
	return nil
}

// Cleanup is run at the end of a session, once all ConsumeClaim goroutines have exited
func (ConsumerGroupHandler) Cleanup(sarama.ConsumerGroupSession) error {
	return nil
}

// ConsumeClaim processes Kafka messages
func (h ConsumerGroupHandler) ConsumeClaim(sess sarama.ConsumerGroupSession, claim sarama.ConsumerGroupClaim) error {
	var wg sync.WaitGroup
	for msg := range claim.Messages() {
		h.semaphore <- struct{}{} // Acquire a slot
		wg.Add(1)
		go func(msg *sarama.ConsumerMessage) {
			defer wg.Done()
			defer func() { <-h.semaphore }() // Release the slot

			var message cve.CVERecord
			log.Printf("Received message from partition %d: %s\n", claim.Partition(), string(msg.Value))
			if err := json.Unmarshal(msg.Value, &message); err != nil {
				log.Printf("Error unmarshaling message: %s", err)
				return
			}
			fmt.Printf("Received message from partition %d: %+v\n", claim.Partition(), message)
			if err := db.StoreCVERecord(h.database, message); err != nil {
				log.Printf("Failed to store CVE record: %v", err)
				return
			}
			sess.MarkMessage(msg, "")
		}(msg)
	}
	wg.Wait()
	return nil
}

// healthCheckHandler handles health check requests
func healthCheckHandler(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusOK)
	w.Write([]byte("OK"))
}

func main() {

	brokers := []string{"kafka.namespace2.svc.cluster.local:9092"}

	// Connect to the database
	database, err := db.Connect()
	if err != nil {
		log.Fatalf("Failed to connect to database: %v", err)
	}
	defer database.Close()

	// Create database schema
	if err := db.CreateSchema(database); err != nil {
		log.Fatalf("Failed to create schema: %v", err)
	}

	// Set up Sarama consumer group
	kafkaConfig := sarama.NewConfig()
	kafkaConfig.Consumer.Return.Errors = true
	kafkaConfig.Version = sarama.V1_1_0_0

	group := "my-consumer-group" // Define a consumer group
	topic := "cve"

	consumerGroup, err := sarama.NewConsumerGroup(brokers, group, kafkaConfig)
	if err != nil {
		log.Fatalf("Error creating consumer group: %s", err)
	}
	defer consumerGroup.Close()

	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()

	// Create a channel to handle OS signals
	signals := make(chan os.Signal, 1)
	signal.Notify(signals, syscall.SIGINT, syscall.SIGTERM)

	handler := ConsumerGroupHandler{
		database:  database,
		semaphore: make(chan struct{}, 100), // Limit the number of concurrent goroutines
	}

	go func() {
		for {
			if err := consumerGroup.Consume(ctx, []string{topic}, handler); err != nil {
				log.Fatalf("Error consuming messages: %s", err)
			}
			// Check if context was canceled
			if ctx.Err() != nil {
				return
			}
		}
	}()

	// Set up the health check endpoint
	http.HandleFunc("/health", healthCheckHandler)
	go func() {
		log.Println("Starting health check server on :8080")
		if err := http.ListenAndServe(":8080", nil); err != nil && err != http.ErrServerClosed {
			log.Fatalf("Error starting health check server: %v", err)
		}
	}()

	// Wait for a termination signal
	<-signals
	log.Println("Interrupt detected, canceling context...")
	cancel()
}
